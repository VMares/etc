(defun stolist (linea )
		(setf l1 '())
		(setf linea (concatenate 'string linea " "))
		(setf j 0)
		(setf n (length linea))
		(dotimes (i n)
				(when (string-equal (subseq linea i (+ i 1)) " ")
					(setf l1 (cons (parse-integer(subseq linea j (+ i 1))) l1))
					(setf j i )
					)
			)
		(return-from stolist l1)
	)

(defun sum2 (lista rev)
	(setf c0 (length rev))
	(setf cont 0)
	(setf c1min 0)
	(setf c2min (+ c0 1))
	(loop for i in rev 
		do 
			(when (< cont (/ c0 2))
				(setf c1 (length (member i lista)))
				(setf c2 (- c0 (length (member (* i -1) rev)) -1))
				(when (and (/= c1 0) (/= c2 0) (/=  c1 6) (/=  c2 6) (< c1 c2))
					(when (>= c2min c2)
						#| (format t "lr ~A ~A~%"	 c1 c2) |#
						(setf c2min c2)
						(setf c1min c1)
					)
					)
				)
			(when (< cont (/ c0 2))
				(setf c1 (length (member i lista)))
				(setf c2 (length (member (* i -1) lista)))
				(when (and (/= c1 0) (/= c2 0)  (/=  c1 6) (/=  c2 6)(< c1 c2))
					(when (>= c2min c2)
						#| (format t "ll ~A ~A~%"	 c1 c2) |#
						(setf c2min c2)
						(setf c1min c1))
					)
				)
			(when (< cont (/ c0 2))
				(setf c1 (- c0 (length (member i rev)) -1))
				(setf c2 (length (member (* i -1) lista)))
				(when (and (/= c1 0) (/= c2 0) (/=  c1 6) (/=  c2 6)(< c1 c2))
					(when (>= c2min c2)
						#| (format t "rl ~A ~A~%"	 c1 c2) |#
						(setf c2min c2)
						(setf c1min c1))
					)
				)
			(when (< cont (/ c0 2))
				(setf c1 (- c0 (length (member i rev)) -1))
				(setf c2 (- c0 (length (member (* i -1) rev))-1))
				(when (and (/= c1 0) (/= c2 0)  (/=  c1 6) (/=  c2 6)(< c1 c2))
					(when (>= c2min c2)
						#| (format t "rr ~A ~A~%"	 c1 c2) |#
						(setf c2min c2)
						(setf c1min c1))
					)
				)
			#| (format t "c2min ~A~%"c2min) |#
			(setf cont (+ cont 1))
		)
		(when (/= c2min (+ c0 1))
			(format t "~A ~A~%" c1min c2min)
			)
		(when (= c2min (+ c0 1))
			(format t "-1~%" c1min c2min)
			)
	)

(setf inF (open "in.txt"))
(setf l (read-line inF nil))
(loop for i =(read-line inF nil)
	while i do
		(setf j i ) 
		(setf rev (stolist j))
		(setf rev (reverse rev))
		(sum2 (stolist i) rev)
	)
(close inF)